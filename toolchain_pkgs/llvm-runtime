ver=14.0.6

[srcs]
https://github.com/llvm/llvm-project/releases/download/llvmorg-%ver/llvm-%ver.src.tar.xz
https://github.com/llvm/llvm-project/releases/download/llvmorg-%ver/clang-%ver.src.tar.xz
https://github.com/llvm/llvm-project/releases/download/llvmorg-%ver/clang-tools-extra-%ver.src.tar.xz
https://github.com/llvm/llvm-project/releases/download/llvmorg-%ver/lld-%ver.src.tar.xz
https://github.com/llvm/llvm-project/releases/download/llvmorg-%ver/compiler-rt-%ver.src.tar.xz
https://github.com/llvm/llvm-project/releases/download/llvmorg-%ver/libunwind-%ver.src.tar.xz
https://github.com/llvm/llvm-project/releases/download/llvmorg-%ver/libcxx-%ver.src.tar.xz
https://github.com/llvm/llvm-project/releases/download/llvmorg-%ver/libcxxabi-%ver.src.tar.xz

[build]
LARCH="x86_64"
LTARGET="X86"

cd llvm-%ver.src
apply_patches %stuff/llvm/patches

cd clang-%ver.src
apply_patches %stuff/clang/patches

cd clang-tools-extra-%ver.src
apply_patches %stuff/clang-tools_extra/patches

cd lld-%ver.src
apply_patches %stuff/lld/patches

cd compiler-rt-%ver.src
apply_patches %stuff/compiler-rt/patches

cd libcxx-%ver.src
apply_patches %stuff/libcxx/patches

cd libcxxabi-%ver.src
apply_patches %stuff/libcxxabi/patches

cd ../llvm-%ver.src
cp -a ../clang-%ver.src tools/clang
cp -a ../clang-tools-extra-%ver.src tools/clang/tools/extra
cp -a ../lld-%ver.src tools/lld
cp -a ../compiler-rt-%ver.src projects/compiler-rt
cp -a ../libunwind-%ver.src projects/libunwind
cp -a ../libcxx-%ver.src projects/libcxx
cp -a ../libcxxabi-%ver.src projects/libcxxabi

pushd %src
	for i in libunwind libcxx libcxxabi; do
		ln -sf $i-%ver.src $i
	done
popd

mkdir -p build-libunwind
cd build-libunwind

CFLAGS="" \
CXXFLAGS="" \
LDFLAGS="" \
cmake %src/libunwind-%ver.src \
	-DCMAKE_CROSSCOMPILING=ON \
	-DCMAKE_INSTALL_PREFIX=%prefix \
	-DCMAKE_BUILD_TYPE=MinSizeRel \
	-DCMAKE_C_COMPILER_TARGET="$XTARGET" \
	-DCMAKE_ASM_COMPILER_TARGET="$XTARGET" \
	-DCMAKE_C_COMPILER="%tools/bin/$XTARGET-clang" \
	-DCMAKE_CXX_COMPILER="%tools/bin/$XTARGET-clang++" \
	-DCMAKE_AR="%tools/bin/$XTARGET-ar" \
	-DCMAKE_NM="%tools/bin/$XTARGET-nm" \
	-DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
	-DLLVM_PATH=%src/llvm-%ver.src \
	-DLIBUNWIND_USE_COMPILER_RT=ON \
	-Wno-dev -G Ninja
%samu
DESTDIR=%rootfs samu install

cd ..

mkdir -p build-libcxxabi
cd build-libcxxabi

CFLAGS="" \
CXXFLAGS="" \
LDFLAGS="" \
cmake %src/libcxxabi-%ver.src \
	-DCMAKE_CROSSCOMPILING=ON \
	-DCMAKE_INSTALL_PREFIX=%prefix \
	-DCMAKE_BUILD_TYPE=MinSizeRel \
	-DCMAKE_C_COMPILER_TARGET="$XTARGET" \
	-DCMAKE_C_COMPILER="%tools/bin/$XTARGET-clang" \
	-DCMAKE_CXX_COMPILER="%tools/bin/$XTARGET-clang++" \
	-DCMAKE_AR="%tools/bin/$XTARGET-ar" \
	-DCMAKE_NM="%tools/bin/$XTARGET-nm" \
	-DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
	-DLLVM_PATH=%src/llvm-%ver.src \
	-DLIBCXXABI_USE_LLVM_UNWINDER=ON \
	-DLIBCXXABI_USE_COMPILER_RT=ON \
	-Wno-dev -G Ninja
%samu
DESTDIR=%rootfs samu install

cd ..

mkdir -p build-libcxx
cd build-libcxx

CFLAGS="" \
CXXFLAGS="" \
LDFLAGS="" \
cmake %src/libcxx-%ver.src \
	-DCMAKE_CROSSCOMPILING=ON \
	-DCMAKE_INSTALL_PREFIX=%prefix \
	-DCMAKE_BUILD_TYPE=MinSizeRel \
	-DCMAKE_C_COMPILER_TARGET="$XTARGET" \
	-DCMAKE_C_COMPILER="%tools/bin/$XTARGET-clang" \
	-DCMAKE_CXX_COMPILER="%tools/bin/$XTARGET-clang++" \
	-DCMAKE_AR="%tools/bin/$XTARGET-ar" \
	-DCMAKE_NM="%tools/bin/$XTARGET-nm" \
	-DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
	-DLLVM_PATH=%src/llvm-%ver.src \
	-DLIBCXX_CXX_ABI=libcxxabi \
	-DLIBCXX_CXX_ABI_INCLUDE_PATHS=%src/libcxxabi-%ver.src/include" \
	-DLIBCXX_HAS_MUSL_LIBC=ON \
	-DLIBCXX_USE_COMPILER_RT=ON \
	-Wno-dev -G Ninja

sed -i 's/-latomic//g' build.ninja

%samu
DESTDIR=%rootfs samu install

cd %src
mkdir -p compiler-rt-sanitizers
cd compiler-rt-sanitizers

CFLAGS="" \
CXXFLAGS="" \
LDFLAGS="" \
cmake %src/compiler-rt-%ver.src \
	-DCMAKE_C_COMPILER_TARGET="$XTARGET" \
	-DCMAKE_ASM_COMPILER_TARGET="$XTARGET" \
	-DCMAKE_C_COMPILER="%tools/bin/$XTARGET-clang" \
	-DCMAKE_CXX_COMPILER="%tools/bin/$XTARGET-clang++" \
	-DCMAKE_AR="%tools/bin/$XTARGET-ar" \
	-DCMAKE_NM="%tools/bin/$XTARGET-nm" \
	-DCMAKE_RANLIB="%tools/bin/$XTARGET-ranlib" \
	-DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
	-DLLVM_CONFIG_PATH="%tools/bin/llvm-config" \
	-DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON \
	-DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
	-DCOMPILER_RT_HAS_VERSION_SCRIPT=OFF \
	-DCOMPILER_RT_STANDALONE_BUILD=ON \
	-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
	-DCOMPILER_RT_USE_LIBCXX=ON \
	-DSANITIZER_CXX_ABI="libc++" \
	-Wno-dev -G Ninja
%samu

for i in lib/linux/*; do
	install -Dm644 "$i" %tools/lib/clang/%ver/lib/linux/$(basename $i)
done

cd %src
mkdir -p build-final
cd build-final

cmake %src/llvm-%ver.src \
	-DCMAKE_CROSSCOMPILING=ON \
	-DCMAKE_INSTALL_PREFIX=%prefix \
	-DCMAKE_BUILD_TYPE=MinSizeRel \
	-DCMAKE_C_COMPILER_TARGET="$XTARGET" \
	-DCMAKE_ASM_COMPILER_TARGET="$XTARGET" \
	-DCMAKE_C_COMPILER="%tools/bin/$XTARGET-clang" \
	-DCMAKE_CXX_COMPILER="%tools/bin/$XTARGET-clang++" \
	-DCMAKE_AR="%tools/bin/$XTARGET-ar" \
	-DCMAKE_NM="%tools/bin/$XTARGET-nm" \
	-DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
	-DLLVM_CONFIG_PATH="%tools/bin/llvm-config" \
	-DLIBCXX_CXX_ABI=libcxxabi \
	-DLIBCXX_HAS_MUSL_LIBC=ON \
	-DLIBCXX_USE_COMPILER_RT=ON \
	-DLIBCXXABI_USE_LLVM_UNWINDER=ON \
	-DLIBCXXABI_USE_COMPILER_RT=ON \
	-DLIBUNWIND_USE_COMPILER_RT=ON \
	-DLLVM_DEFAULT_TARGET_TRIPLE=$XTARGET \
	-DLLVM_ENABLE_PROJECTS="libunwind;libcxx;libcxxabi" \
	-DLLVM_TARGETS_TO_BUILD=$LTARGET \
	-Wno-dev -G Ninja

sed -i 's/-latomic//g' build.ninja

%samu unwind cxxabi cxx
DESTDIR=%rootfs samu install-unwind install-cxxabi install-cxx
