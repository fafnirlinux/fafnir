#!/bin/sh

memory=1G

init() {
	get_nya
	build_nya

	if [[ ! -f nya ]]; then
		echo "couldn't build nya"
		exit 1
	fi

	clone_repo
}

get_nya() {
	[[ -f nya ]] && rm nya
	[[ -d nya_src ]] && rm -rf nya_src

	git clone https://github.com/fafnirlinux/nya nya_src

	if [[ ! -d nya_src ]]; then
		echo "couldn't clone nya"
	fi
}

build_nya() {
	if [[ ! -d nya_src ]]; then
		echo "nya source doesn't exist"
		exit 1
	fi

	cd nya_src
	mkdir -p build
	cd build
	cmake ..
	make -j$(nproc)
	cp nya ../../
	cd ../../
}

clone_repo() {
	mkdir -p src
	cd src

	[[ -d pkg ]] && rm -rf pkg

	git clone https://github.com/fafnirlinux/repo pkg

	if [[ ! -d pkg ]]; then
		echo "couldn't clone repo"
		exit 1
	fi

	[[ -d stuff ]] && rm -rf stuff
	mv pkg/stuff .
	cd ..
}

build_toolchain() {
	mkdir -p rootfs tools

	export PATH=$PWD/tools/bin:$PATH

	emerge() {
		grep -Fxq $1 built && return
		./nya build --config config.toolchain $1 && echo $1 >> built
	}

	emerge musl-headers
	emerge binutils
	emerge gcc
	emerge musl
	emerge libgcc-shared2
	emerge linux-headers
	emerge pkgconf
}

build_toolchain3() {
	mkdir -p rootfs tools

	export PATH=$PWD/tools/bin:$PATH

	#export HOST="$(echo $(clang -dumpmachine) | sed -e 's/-[^-]*/-cross/')"
	export TARGET="x86_64-linux-musl"

	emerge() {
		./nya build --config config.toolchain $1
	}

	emerge libstdc++

	return

	emerge binutils
	emerge gcc
	emerge linux-headers
	emerge glibc
	emerge libstdc++
}

build_toolchain2() {
	mkdir -p rootfs tools

	export PATH=$PWD/tools/bin:$PATH

	export HOST="$(echo $(clang -dumpmachine) | sed -e 's/-[^-]*/-cross/')"
	export TARGET="x86_64-linux-musl"
	export XHOST=$HOST XTARGET=$TARGET

	export BUILDFLAGS="--build=$XHOST --host=$XTARGET"
	export TOOLFLAGS="--build=$XHOST --host=$XTARGET --target=$XTARGET"
	export PERLFLAGS="--target=$XTARGET"

	export xcflags="-D_FORTIFY_SOURCE=2 -g0 -Os -flto -fomit-frame-pointer -fno-asynchronous-unwind-tables -fno-unwind-tables -ffunction-sections -fdata-sections -fstack-protector-strong -fstack-clash-protection -mretpoline --param=ssp-buffer-size=4 -pipe"
	export xldflags="-Wl,-z,relro,-z,now -Wl,--as-needed -Wl,--gc-sections -Wl,-z,noexecstack -s"

	emerge() {
		./nya build --config config.toolchain $1
	}

	emerge gettext-tiny
	emerge ncurses
	emerge m4
	emerge bison
	emerge flex
	emerge bc
	emerge kmod
	emerge gperf
	emerge python
	emerge samurai
	emerge meson
	emerge bmake
	emerge cmake
	emerge linux-headers
	emerge musl-headers
	emerge binutils
	emerge elftoolchain
	emerge llvm
	emerge compiler-rt
	emerge llvm-runtime
	emerge slibtool
	emerge autoconf
	emerge automake
	emerge pkgconf

	return

	for pkg in toolchain_pkgs/*; do
		./nya build --config config.toolchain $(basename $pkg)
	done
}

build_stage0() {
	emerge kernel-headers
	emerge gcc3
	emerge make
	emerge patch
	emerge musl
	emerge libedit
	emerge netbsd-curses
	emerge bash
	emerge libz
	emerge libressl
	emerge libarchive
	emerge curl
	emerge nya
}

emerge() {
	./nya emerge $@
}

create_fs() {
	check_root

	./nya build filesystem
}

run() {
	if [[ ! -f fafnirlinux.iso ]]; then
		exit 1
	fi

	qemu-system-x86_64 -boot d -cdrom fafnirlinux.iso -m $memory
}

boot() {
	qemu-system-x86_64 -s -kernel iso/kernel -boot c -m $memory -hda iso/rootfs.gz -append "ro root=/dev/sr0"
}

iso() {
	if [[ ! -d rootfs ]]; then
		exit 1
	fi

	check_root

	mkdir -p iso
	cd rootfs

	[[ -f ../iso/rootfs.gz ]] && rm ../iso/rootfs.gz

	find . | cpio -R root:root -H newc -o | gzip > ../iso/rootfs.gz

	cd ..

	cp syslinux/isolinux.bin iso
	cp syslinux/isohdpfx.bin iso
	cp syslinux/ldlinux.c32 iso

	[[ ! -f iso/isolinux.cfg ]] && echo "default kernel initrd=rootfs.zst" > iso/isolinux.cfg

	cd iso

	xorriso \
		-as mkisofs \
		-o ../fafnirlinux.iso \
		-b isolinux.bin \
		-isohybrid-mbr isohdpfx.bin \
		-c boot.cat \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		./

	cd ..
}

check_root() {
	if [ "$EUID" -ne 0 ]; then
		echo "run as root"
		exit 1
	fi
}

enter_chroot() {
	sudo chroot rootfs $1
}

help() {
	echo idiot
}

main() {
	export STAGE=0

	case $1 in
		init) init ;;
		toolchain) build_toolchain ;;
		stage0) build_stage0 ;;
		get-nya) get_nya ;;
		build-nya) build_nya ;;
		repo) clone_repo ;;
		chroot) shift; enter_chroot $1 ;;
		iso) iso ;;
		run) run ;;
		boot) boot ;;
		root) create_fs ;;
		build) shift; ./nya build $@ ;;
		install) shift; ./nya install $@ ;;
		remove) shift; ./nya remove $@ ;;
		*) emerge $@ ;;
	esac

	shift $((OPTIND -1))
}

main $@
