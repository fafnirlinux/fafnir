#!/bin/sh

memory=1G

init() {
	if [[ -f nya ]]; then
		exit 1
	fi

	if [[ ! -d nya_src ]]; then
		git clone https://github.com/fafnirlinux/nya nya_src
	fi

	if [[ ! -d nya_src ]]; then
		echo "couldn't clone nya"
		exit 1
	fi

	build_nya

	if [[ ! -f nya ]]; then
		echo "couldn't build nya"
		exit 1
	fi

	if [[ ! -d src/pkg ]]; then
		mkdir -p src
		cd src
		git clone https://github.com/fafnirlinux/repo pkg
		[[ -d stuff ]] && rm -rf stuff
		mv pkg/stuff .
		cd ..
	fi
}

build_nya() {
	cd nya_src
	mkdir -p build
	cd build
	cmake ..
	make -j$(nproc)
	cp nya ../../
	cd ../../
}

build_toolchain() {
	if [[ ! -d src ]]; then
		exit 1
	fi

	[[ ! -f built ]] && touch built

	build() {
		grep -q $1 built && return
		./nya build $1 --config config.toolchain && echo $1 >> built && echo "" >> built
	}

	build openssl
	build curl
	build expat
	build attr
	build acl
	build bzip2
	build lzo
	build zstd
	build libarchive
	build ncurses
	build cmake
	build libffi
	build zlib
	build xz
	build libxml2
	build ninja
	build python3-setuptools
	build llvm
	build gettext
	build bmake
	build kernel-headers
	build musl-headers
	build binutils
	build autoconf
	build automake
	build gawk
	build perl
	build samurai
	build bc
	build kmod
	build gperf
	build m4
	build pkgconf
	build musl
	build python3
	build bison
	build gdbm
	build libnsl
	build libtirpc
	build mpdecimal
	build sqlite3
}

build() {
	./nya emerge $@
}

run() {
	if [[ ! -f fafnirlinux.iso ]]; then
		exit 1
	fi

	qemu-system-x86_64 -boot d -cdrom fafnirlinux.iso -m $memory
}

iso() {
	if [[ ! -d rootfs ]]; then
		exit 1
	fi

	mkdir -p iso
	cd rootfs

	[[ -f ../iso/rootfs.zst ]] && rm ../iso/rootfs.zst

	find . | cpio -H newc -o | zstd -T$(nproc) -19 > ../iso/rootfs.zst

	cd ..

	cp syslinux/isolinux.bin iso
	cp syslinux/isohdpfx.bin iso
	cp syslinux/ldlinux.c32 iso

	[[ ! -f iso/isolinux.cfg ]] && echo "default kernel initrd=rootfs.zst" > iso/isolinux.cfg

	cd iso

	xorriso \
		-as mkisofs \
		-o ../fafnirlinux.iso \
		-b isolinux.bin \
		-isohybrid-mbr isohdpfx.bin \
		-c boot.cat \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		./

	cd ..
}

enter_chroot() {
	sudo chroot rootfs /bin/ash
}

help() {
	echo idiot
}

main() {
	case "$1" in
		init) init ;;
		toolchain) build_toolchain ;;
		nya) build_nya ;;
		chroot) enter_chroot ;;
		iso) iso ;;
		run) run ;;
		*|build) build $@ ;;
	esac

	shift $((OPTIND -1))
}

main $@
